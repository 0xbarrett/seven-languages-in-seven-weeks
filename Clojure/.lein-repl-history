(def big
[st & n]
(< (count st) n) (true) (false))
(defn big
[st & n]
(< (count st) n) (true) (false))
(big "blah" 3)
(defn big
[st n]
(< (count st) n) (true) (false))
(big "blah" 3)
(defn big
[st n]
(< (count st) n)
)
(big "blah" 5)
exit
(class [0, 1, 0])
(class (0, 1, 0))
(class (list 1 2 3))
exit
(defn collection-type
[col]
(if (list? col) :list)
(if (map? col) :map)
(if (vector? col) :vector))
(collection-type (list 1 2 3))
exit
(defn size [v]
(if empty? v)
0
(inc (size (rest v)))
(size [1 2 3])
)))
(defn size [v]
(if empty? v)
0
(inc (size (rest v)))))
(defn size [v]
(if empty? v)
0
(inc (size (rest v))))
(size [1 2 3])
(defn size [v]
(if (empty? v)
0
(inc (size (rest v)))))
(size [1 2 3])
(loop [x 1] x)
(defn size [v]
(loop [l v, c 0]
(if (empty? l)
c
(recur (rest l) (inc c)))))
(size [1 2 3])
(collection-type)
exit
(collection-type)
(foo)
exit
